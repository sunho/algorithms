package main

import (
	"math/big"
	"strconv"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestMultiplyBench(t *testing.T) {
	for i := 0; i < 1000; i++ {
		for j := 0; j < 100; j++ {
			a, b := NewNumber("5000132312312323333331223131111111111123211111111111111111111111111111111232323123311111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000011223333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333312312323231231312320"+strconv.Itoa(i)), NewNumber("4132131231233333333333333333333333333333333333333333333333333333333333333333333333123213123333333333333333333333333333333321321313312312312312312312312312312312321231231232313123123410401000212301030132132111111111111111111123232323123111111031"+strconv.Itoa(j))
			a.KMultiply(b)
		}
	}
}

func TestMultiply2(t *testing.T) {
	a := assert.New(t)
	for i := 0; i < 100; i++ {
		for j := 0; j < 100; j++ {
			t1 := "50001231231232321323333333333333333132312312323000000000000033333122313111111111112321111111111111111111111111111111123232312331111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000213321312312333333333333333333333333333333333333333333000" + strconv.Itoa(i)
			t2 := "412313123123410401000212301030132132111111111111111111123232323123111111031" + strconv.Itoa(j)
			aa, bb := NewNumber(t1), NewNumber(t2)
			r := aa.KMultiply(bb)
			n1 := big.NewInt(0)
			n1.SetString(t1, 10)
			n2 := big.NewInt(0)
			n2.SetString(t2, 10)
			n3 := big.NewInt(0)
			n3.Mul(n1, n2)
			a.Equal(n3.String(), r.String())
		}
	}
}

func TestMultiply(t *testing.T) {
	a := assert.New(t)
	for i := 0; i < 100; i++ {
		for j := 0; j < 100; j++ {
			t1, t2 := i+500000, j+5000000
			aa, bb := NewNumber(strconv.Itoa(t1)), NewNumber(strconv.Itoa(t2))
			k := aa.KMultiply(bb)
			sol := t1 * t2
			a.Equal(strconv.Itoa(sol), k.String())
		}
	}
}
