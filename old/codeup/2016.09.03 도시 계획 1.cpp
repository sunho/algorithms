/**************************************************************
# 문제 설명 
 신도시의 도시계획을 맡은 광곽이는 도시의 도로지도를 보고 너무 머리가 아파 프로그램을 이용해 도로의 개수를 세려고 한다.
머리가 아파 힘들어하는 광곽이를 도와주자.
(도움말을 반드시 참고하세요) 
# 입력 
 도시의 크기 $가로 x$와 $세로 y$이 주어지고, $x*y$크기의 도시의 지도가 주어진다.
$0$은 일반 주거지역이고, $1$은 도로이다. 단, 모든 도로는 $1$차선이고, 도로가 대각선인 경우는 없다.
$x$와 $y$는 $3$이상 $30$이하의 정수이다. 
# 출력 
 도로의 갯수를 출력한다.
 
# 입력 예시 
 10 10
0100001000
0100001000
1111111111
0000100100
0000100100
1111111111
0000100100
0000100100
1111111111
0000100100
 
# 출력 예시 
 7 
# 도움말 
 입출력 예시2
30 30
000100000000001000000000000100
111111111111111111111111111111
000100000000001000000000000100
000111111111111000000000000111
111100000000001000000000000100
000100000000001000000000000100
000100000000001111111100000100
000100000000001000000000000100
000100000000001000000000000100
000100000000001000001111111100
000100000000001110001000000000
000100000000001000001000000000
000111111110001000001000000000
000100000000001000001000000000
000100000000001000001000000000
000111111111111111111111111110
000100000000001000001000000000
000100000000001000001000000000
000100000000001000001000000000
000100000111111111111111111110
000100000000001000001000000000
000100000000001000001000000000
000111111111111000001000000000
000000000000001000001000000000
000000000000001111111111111110
011111111110000010000000000010
010000000010000010000000000010
010000000010000011111111111110
011111111110000000000000000010
000000000000000000000000000010

출력
23
아래 그림처럼, 도로의 개수란 직선으로 뻗은 것을 1개로 합니다. (빨간선의 개수를 세면 됨)
 
# 출처 
 martinok1103 

*************************************************************/
#include <iostream>
using namespace std;

int bo[2][2]={{0,1},{1,0}};
bool founded[32][32][2];
bool gido[32][32];
void dfs(int x,int y,int turn)
{
    if(!founded[x][y][turn]&&
       gido[x][y])
    {
        founded[x][y][turn]=true;
        int mx=bo[turn][0];
        int my=bo[turn][1];
        dfs(x+mx,y+my,turn);
        dfs(x+mx*-1,y+my*-1,turn);
    }
}
bool predict(int x,int y,int turn)
{
    int mx=bo[turn][0];
    int my=bo[turn][1];
    return gido[x+mx][y+my]||gido[x+mx*-1][y+my*-1];
}
int main()
{
    int w,h;
    cin>>w>>h;
    int total=0;
    char c[31];
    for(int i=1;i<=h;i++)
    {
        cin>>c;
        for(int j=0;c[j]!=0;j++)
        {
            gido[j+1][i]=c[j]-'0';
        }
    }
    for(int i=1;i<=w;i++)
    {
        for(int j=1;j<=h;j++)
        {
            if(gido[i][j])
            {
                if(gido[i-1][j]==0&&gido[i+1][j]==0&&
               gido[i][j-1]==0&&gido[i][j+1]==0)
                {
                    total++;
                    continue;
                }
                if(founded[i][j][0]==false
                   &&predict(i,j,0))
                {
                    total++;
                    dfs(i,j,0);
                }
                if(founded[i][j][1]==false
                   &&predict(i,j,1))
                {
                    total++;
                    dfs(i,j,1);
                }
            }
        }
    }
    cout<<total;
}

/**************************************************************
	문제번호: 3155
	아이디: ksunhokim
	사용언어: C++
	결과: 정확한 풀이
	수행 시간:0 ms
	메모리 사용량:1700 kb
****************************************************************/

